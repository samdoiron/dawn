[{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "media_embed": {}, "subreddit": "programming", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "59tolr", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "ilyash", "media": null, "score": 25, "approved_by": null, "over_18": false, "domain": "ilya-sher.org", "hidden": false, "num_comments": 22, "thumbnail": "", "subreddit_id": "t5_2fwo", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "archived": false, "removal_reason": null, "stickied": false, "is_self": false, "hide_score": false, "spoiler": false, "permalink": "/r/programming/comments/59tolr/creating_a_language_is_easier_now/", "locked": false, "name": "t3_59tolr", "created": 1477678704.0, "url": "https://ilya-sher.org/2016/10/28/creating-a-language-is-easier-now/", "author_flair_text": null, "quarantine": false, "title": "Creating a language is easier now", "created_utc": 1477649904.0, "link_flair_text": null, "ups": 25, "upvote_ratio": 0.79, "mod_reports": [], "visited": false, "num_reports": null, "distinguished": null}}], "after": null, "before": null}}, {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "banned_by": null, "removal_reason": null, "link_id": "t3_59tolr", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "d9ba75z", "gilded": 0, "archived": false, "report_reasons": null, "author": "roffLOL", "parent_id": "t3_59tolr", "score": 3, "approved_by": null, "controversiality": 0, "body": "it's both easy and fun. so far, it's the number one abstraction and interface. nothing else comes close to its cleanliness of interface and separation of concerns.\n\ncode generation is the one ring to rule them all.", "edited": false, "author_flair_css_class": null, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;it&amp;#39;s both easy and fun. so far, it&amp;#39;s the number one abstraction and interface. nothing else comes close to its cleanliness of interface and separation of concerns.&lt;/p&gt;\n\n&lt;p&gt;code generation is the one ring to rule them all.&lt;/p&gt;\n&lt;/div&gt;", "stickied": false, "subreddit": "programming", "score_hidden": false, "name": "t1_d9ba75z", "created": 1477683705.0, "author_flair_text": null, "created_utc": 1477654905.0, "ups": 3, "mod_reports": [], "num_reports": null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "banned_by": null, "removal_reason": null, "link_id": "t3_59tolr", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "banned_by": null, "removal_reason": null, "link_id": "t3_59tolr", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "banned_by": null, "removal_reason": null, "link_id": "t3_59tolr", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "d9besrv", "gilded": 0, "archived": false, "report_reasons": null, "author": "ilyash", "parent_id": "t1_d9bdz2u", "score": 1, "approved_by": null, "controversiality": 0, "body": "Fixed bootstrap.\n\n\"horrid stack dump\" usually happens only if bootstrap fails because hooks for catching and pretty printing exceptions are not set up yet.\n\nTry \"ngs -e some_undefined_var\" to see nice backtrace :)", "edited": false, "author_flair_css_class": null, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Fixed bootstrap.&lt;/p&gt;\n\n&lt;p&gt;&amp;quot;horrid stack dump&amp;quot; usually happens only if bootstrap fails because hooks for catching and pretty printing exceptions are not set up yet.&lt;/p&gt;\n\n&lt;p&gt;Try &amp;quot;ngs -e some_undefined_var&amp;quot; to see nice backtrace :)&lt;/p&gt;\n&lt;/div&gt;", "stickied": false, "subreddit": "programming", "score_hidden": false, "name": "t1_d9besrv", "created": 1477692233.0, "author_flair_text": null, "created_utc": 1477663433.0, "ups": 1, "mod_reports": [], "num_reports": null, "distinguished": null}}], "after": null, "before": null}}, "user_reports": [], "saved": false, "id": "d9bdz2u", "gilded": 0, "archived": false, "report_reasons": null, "author": "ilyash", "parent_id": "t1_d9bast9", "score": 1, "approved_by": null, "controversiality": 0, "body": "Thanks! Typo fixed.\n\nboostrap - recent breakage I guess. Anyhow CLI is not ready so it wouldn't be much good even without crash :) I'll fix that.\n\nSee \"running\" - https://github.com/ilyash/ngs#running", "edited": false, "author_flair_css_class": null, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks! Typo fixed.&lt;/p&gt;\n\n&lt;p&gt;boostrap - recent breakage I guess. Anyhow CLI is not ready so it wouldn&amp;#39;t be much good even without crash :) I&amp;#39;ll fix that.&lt;/p&gt;\n\n&lt;p&gt;See &amp;quot;running&amp;quot; - &lt;a href=\"https://github.com/ilyash/ngs#running\"&gt;https://github.com/ilyash/ngs#running&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "stickied": false, "subreddit": "programming", "score_hidden": false, "name": "t1_d9bdz2u", "created": 1477691030.0, "author_flair_text": null, "created_utc": 1477662230.0, "ups": 1, "mod_reports": [], "num_reports": null, "distinguished": null}}], "after": null, "before": null}}, "user_reports": [], "saved": false, "id": "d9bast9", "gilded": 0, "archived": false, "report_reasons": null, "author": "pfudk", "parent_id": "t3_59tolr", "score": 2, "approved_by": null, "controversiality": 0, "body": "Interesting project.\n\nAlthough upon first launch, you're greeted with a typo :)\n\n    $ ./ngs\n    Cold not find bootstrap file\n\n...And upon second launch, you're greeted with an horrid stack dump (because in ``bootstrap()``, ``ARGV.len() &gt; 1`` is assumed).", "edited": 1477658489.0, "author_flair_css_class": null, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Interesting project.&lt;/p&gt;\n\n&lt;p&gt;Although upon first launch, you&amp;#39;re greeted with a typo :)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$ ./ngs\nCold not find bootstrap file\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;...And upon second launch, you&amp;#39;re greeted with an horrid stack dump (because in &lt;code&gt;bootstrap()&lt;/code&gt;, &lt;code&gt;ARGV.len() &amp;gt; 1&lt;/code&gt; is assumed).&lt;/p&gt;\n&lt;/div&gt;", "stickied": false, "subreddit": "programming", "score_hidden": false, "name": "t1_d9bast9", "created": 1477685206.0, "author_flair_text": null, "created_utc": 1477656406.0, "ups": 2, "mod_reports": [], "num_reports": null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "banned_by": null, "removal_reason": null, "link_id": "t3_59tolr", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "d9bb2xf", "gilded": 0, "archived": false, "report_reasons": null, "author": "hector_villalobos", "parent_id": "t3_59tolr", "score": 2, "approved_by": null, "controversiality": 0, "body": "I was complaining in another thread how difficult Haskell is, later I found [this](https://wiki.haskell.org/Parsing_a_simple_imperative_language).\n\nI can't believe how easy it is to implement a simple parser, I was struggling before trying to do something similar in an imperative language, using Shunting Yard Algorithm and trying to figure it out how to parse a function with multiple arguments.\n\nNow, I take that back, Haskell is really awesome in this kind of things.", "edited": false, "author_flair_css_class": null, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I was complaining in another thread how difficult Haskell is, later I found &lt;a href=\"https://wiki.haskell.org/Parsing_a_simple_imperative_language\"&gt;this&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;I can&amp;#39;t believe how easy it is to implement a simple parser, I was struggling before trying to do something similar in an imperative language, using Shunting Yard Algorithm and trying to figure it out how to parse a function with multiple arguments.&lt;/p&gt;\n\n&lt;p&gt;Now, I take that back, Haskell is really awesome in this kind of things.&lt;/p&gt;\n&lt;/div&gt;", "stickied": false, "subreddit": "programming", "score_hidden": false, "name": "t1_d9bb2xf", "created": 1477685839.0, "author_flair_text": null, "created_utc": 1477657039.0, "ups": 2, "mod_reports": [], "num_reports": null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "banned_by": null, "removal_reason": null, "link_id": "t3_59tolr", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "banned_by": null, "removal_reason": null, "link_id": "t3_59tolr", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "d9bfxnz", "gilded": 0, "archived": false, "report_reasons": null, "author": "ilyash", "parent_id": "t1_d9bffow", "score": 1, "approved_by": null, "controversiality": 0, "body": "&gt; a bit of a stretch\n\nMight happen. I don't know APL. It just looks like it has a lot of these symbols :)", "edited": false, "author_flair_css_class": null, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;a bit of a stretch&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Might happen. I don&amp;#39;t know APL. It just looks like it has a lot of these symbols :)&lt;/p&gt;\n&lt;/div&gt;", "stickied": false, "subreddit": "programming", "score_hidden": false, "name": "t1_d9bfxnz", "created": 1477693828.0, "author_flair_text": null, "created_utc": 1477665028.0, "ups": 1, "mod_reports": [], "num_reports": null, "distinguished": null}}], "after": null, "before": null}}, "user_reports": [], "saved": false, "id": "d9bffow", "gilded": 0, "archived": false, "report_reasons": null, "author": "east_lisp_junk", "parent_id": "t3_59tolr", "score": 2, "approved_by": null, "controversiality": 0, "body": "It's a bit of a stretch to say APL took the \"syntax for all the concepts\" route -- those symbols are just the built-in functions/operators, not syntactic forms.", "edited": false, "author_flair_css_class": null, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s a bit of a stretch to say APL took the &amp;quot;syntax for all the concepts&amp;quot; route -- those symbols are just the built-in functions/operators, not syntactic forms.&lt;/p&gt;\n&lt;/div&gt;", "stickied": false, "subreddit": "programming", "score_hidden": false, "name": "t1_d9bffow", "created": 1477693146.0, "author_flair_text": null, "created_utc": 1477664346.0, "ups": 2, "mod_reports": [], "num_reports": null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "banned_by": null, "removal_reason": null, "link_id": "t3_59tolr", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "d9bogk1", "gilded": 0, "archived": false, "report_reasons": null, "author": "Otteris", "parent_id": "t3_59tolr", "score": 2, "approved_by": null, "controversiality": 0, "body": "Seriously? Ever heard of LLVM?", "edited": false, "author_flair_css_class": null, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Seriously? Ever heard of LLVM?&lt;/p&gt;\n&lt;/div&gt;", "stickied": false, "subreddit": "programming", "score_hidden": false, "name": "t1_d9bogk1", "created": 1477704395.0, "author_flair_text": null, "created_utc": 1477675595.0, "ups": 2, "mod_reports": [], "num_reports": null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "banned_by": null, "removal_reason": null, "link_id": "t3_59tolr", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "banned_by": null, "removal_reason": null, "link_id": "t3_59tolr", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "banned_by": null, "removal_reason": null, "link_id": "t3_59tolr", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "d9bmkgx", "gilded": 0, "archived": false, "report_reasons": null, "author": "htuhola", "parent_id": "t1_d9bea9n", "score": 1, "approved_by": null, "controversiality": 0, "body": "It's several posts in date order. It's a log. Don't read it as facts, see what you can learn from others.\n\nTo have more readable syntax and cleaner syntax for different things puts you eventually turn to more parsing. You will find out that a syntax cannot be simultaneously easy to parse and readable when you get to complex enough subjects to express.\n\nThe story is not about difficulties to implement parsers. There he implements whole lot of parsers. It's about difficulty of living with hand-written parsers.\n\nIt hints on how you really won't \"steer\" aside from the parsing problems with hacks. The problems that parsing theory tackles with are central to human-computer interaction with languages.\n\nIt's also shows how difficulty to implement parsers affects how you handle and treat languages.", "edited": false, "author_flair_css_class": null, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s several posts in date order. It&amp;#39;s a log. Don&amp;#39;t read it as facts, see what you can learn from others.&lt;/p&gt;\n\n&lt;p&gt;To have more readable syntax and cleaner syntax for different things puts you eventually turn to more parsing. You will find out that a syntax cannot be simultaneously easy to parse and readable when you get to complex enough subjects to express.&lt;/p&gt;\n\n&lt;p&gt;The story is not about difficulties to implement parsers. There he implements whole lot of parsers. It&amp;#39;s about difficulty of living with hand-written parsers.&lt;/p&gt;\n\n&lt;p&gt;It hints on how you really won&amp;#39;t &amp;quot;steer&amp;quot; aside from the parsing problems with hacks. The problems that parsing theory tackles with are central to human-computer interaction with languages.&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s also shows how difficulty to implement parsers affects how you handle and treat languages.&lt;/p&gt;\n&lt;/div&gt;", "stickied": false, "subreddit": "programming", "score_hidden": false, "name": "t1_d9bmkgx", "created": 1477702130.0, "author_flair_text": null, "created_utc": 1477673330.0, "ups": 1, "mod_reports": [], "num_reports": null, "distinguished": null}}], "after": null, "before": null}}, "user_reports": [], "saved": false, "id": "d9bea9n", "gilded": 0, "archived": false, "report_reasons": null, "author": "ilyash", "parent_id": "t1_d9bat77", "score": 1, "approved_by": null, "controversiality": 0, "body": "Without digging deep looks like it describes a situation when people are having difficulties with implementing parsers. I have no such pain. I'm not for adding much syntax for the sake of cleanliness and readability of the language. Can you please explain what should I find there and why did you point in that direction?\n\n", "edited": false, "author_flair_css_class": null, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Without digging deep looks like it describes a situation when people are having difficulties with implementing parsers. I have no such pain. I&amp;#39;m not for adding much syntax for the sake of cleanliness and readability of the language. Can you please explain what should I find there and why did you point in that direction?&lt;/p&gt;\n&lt;/div&gt;", "stickied": false, "subreddit": "programming", "score_hidden": false, "name": "t1_d9bea9n", "created": 1477691491.0, "author_flair_text": null, "created_utc": 1477662691.0, "ups": 1, "mod_reports": [], "num_reports": null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "banned_by": null, "removal_reason": null, "link_id": "t3_59tolr", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "banned_by": null, "removal_reason": null, "link_id": "t3_59tolr", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "banned_by": null, "removal_reason": null, "link_id": "t3_59tolr", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "banned_by": null, "removal_reason": null, "link_id": "t3_59tolr", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "banned_by": null, "removal_reason": null, "link_id": "t3_59tolr", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "banned_by": null, "removal_reason": null, "link_id": "t3_59tolr", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "banned_by": null, "removal_reason": null, "link_id": "t3_59tolr", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "d9bg8q9", "gilded": 0, "archived": false, "report_reasons": null, "author": "roffLOL", "parent_id": "t1_d9bfuot", "score": 1, "approved_by": null, "controversiality": 0, "body": "it is a good contribution. short, concise and easily digestible. you've made my day.", "edited": false, "author_flair_css_class": null, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;it is a good contribution. short, concise and easily digestible. you&amp;#39;ve made my day.&lt;/p&gt;\n&lt;/div&gt;", "stickied": false, "subreddit": "programming", "score_hidden": false, "name": "t1_d9bg8q9", "created": 1477694241.0, "author_flair_text": null, "created_utc": 1477665441.0, "ups": 1, "mod_reports": [], "num_reports": null, "distinguished": null}}], "after": null, "before": null}}, "user_reports": [], "saved": false, "id": "d9bfuot", "gilded": 0, "archived": false, "report_reasons": null, "author": "ilyash", "parent_id": "t1_d9bfa89", "score": 1, "approved_by": null, "controversiality": 0, "body": "It works for me. Backtraces have locations which are either on the spot or very close. I guess you'd like to \"grep location\" because it can't be all of it.\n\nI wouldn't consider having such functionality somewhere on github left to be discovered mostly by mistake such a great contribution :)", "edited": false, "author_flair_css_class": null, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It works for me. Backtraces have locations which are either on the spot or very close. I guess you&amp;#39;d like to &amp;quot;grep location&amp;quot; because it can&amp;#39;t be all of it.&lt;/p&gt;\n\n&lt;p&gt;I wouldn&amp;#39;t consider having such functionality somewhere on github left to be discovered mostly by mistake such a great contribution :)&lt;/p&gt;\n&lt;/div&gt;", "stickied": false, "subreddit": "programming", "score_hidden": false, "name": "t1_d9bfuot", "created": 1477693716.0, "author_flair_text": null, "created_utc": 1477664916.0, "ups": 1, "mod_reports": [], "num_reports": null, "distinguished": null}}], "after": null, "before": null}}, "user_reports": [], "saved": false, "id": "d9bfa89", "gilded": 0, "archived": false, "report_reasons": null, "author": "roffLOL", "parent_id": "t1_d9bf2wq", "score": 1, "approved_by": null, "controversiality": 0, "body": "but that script does work (my work computer is unfortunately dead and i cannot test it)? i've intended to look on that exact issue, but since i only write languages for my own amusement and personal benefit, i really don't mind much how a malformed program breaks.\n\nif it works, thanks for your contribution =)", "edited": false, "author_flair_css_class": null, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;but that script does work (my work computer is unfortunately dead and i cannot test it)? i&amp;#39;ve intended to look on that exact issue, but since i only write languages for my own amusement and personal benefit, i really don&amp;#39;t mind much how a malformed program breaks.&lt;/p&gt;\n\n&lt;p&gt;if it works, thanks for your contribution =)&lt;/p&gt;\n&lt;/div&gt;", "stickied": false, "subreddit": "programming", "score_hidden": false, "name": "t1_d9bfa89", "created": 1477692938.0, "author_flair_text": null, "created_utc": 1477664138.0, "ups": 1, "mod_reports": [], "num_reports": null, "distinguished": null}}], "after": null, "before": null}}, "user_reports": [], "saved": false, "id": "d9bf2wq", "gilded": 0, "archived": false, "report_reasons": null, "author": "ilyash", "parent_id": "t1_d9ben52", "score": 2, "approved_by": null, "controversiality": 0, "body": "Bolting on source location tracking (for backtraces) was a headache everything else is OK. Unfortunately source location was done in such a manner that contributing it back doesn't look feasible: https://github.com/ilyash/ngs/blob/b92094d516d6e6b8da14e8bdca535668ee5300aa/c/patch-leg-output.awk#L20", "edited": false, "author_flair_css_class": null, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Bolting on source location tracking (for backtraces) was a headache everything else is OK. Unfortunately source location was done in such a manner that contributing it back doesn&amp;#39;t look feasible: &lt;a href=\"https://github.com/ilyash/ngs/blob/b92094d516d6e6b8da14e8bdca535668ee5300aa/c/patch-leg-output.awk#L20\"&gt;https://github.com/ilyash/ngs/blob/b92094d516d6e6b8da14e8bdca535668ee5300aa/c/patch-leg-output.awk#L20&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "stickied": false, "subreddit": "programming", "score_hidden": false, "name": "t1_d9bf2wq", "created": 1477692643.0, "author_flair_text": null, "created_utc": 1477663843.0, "ups": 2, "mod_reports": [], "num_reports": null, "distinguished": null}}], "after": null, "before": null}}, "user_reports": [], "saved": false, "id": "d9ben52", "gilded": 0, "archived": false, "report_reasons": null, "author": "roffLOL", "parent_id": "t1_d9bed7d", "score": 2, "approved_by": null, "controversiality": 0, "body": "primarily use leg in this package: http://piumarta.com/software/peg/\nhas never failed me. plus a few sed tweaks to append parsers to one another. *high-five\n\nprefer the looks of the leg grammar over peg.", "edited": false, "author_flair_css_class": null, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;primarily use leg in this package: &lt;a href=\"http://piumarta.com/software/peg/\"&gt;http://piumarta.com/software/peg/&lt;/a&gt;\nhas never failed me. plus a few sed tweaks to append parsers to one another. *high-five&lt;/p&gt;\n\n&lt;p&gt;prefer the looks of the leg grammar over peg.&lt;/p&gt;\n&lt;/div&gt;", "stickied": false, "subreddit": "programming", "score_hidden": false, "name": "t1_d9ben52", "created": 1477692003.0, "author_flair_text": null, "created_utc": 1477663203.0, "ups": 2, "mod_reports": [], "num_reports": null, "distinguished": null}}], "after": null, "before": null}}, "user_reports": [], "saved": false, "id": "d9bed7d", "gilded": 0, "archived": false, "report_reasons": null, "author": "ilyash", "parent_id": "t1_d9bc31n", "score": 1, "approved_by": null, "controversiality": 0, "body": "I'm using a C library that implements a PEG parser.... plus a few \"sed\" tweaks.", "edited": false, "author_flair_css_class": null, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m using a C library that implements a PEG parser.... plus a few &amp;quot;sed&amp;quot; tweaks.&lt;/p&gt;\n&lt;/div&gt;", "stickied": false, "subreddit": "programming", "score_hidden": false, "name": "t1_d9bed7d", "created": 1477691608.0, "author_flair_text": null, "created_utc": 1477662808.0, "ups": 1, "mod_reports": [], "num_reports": null, "distinguished": null}}], "after": null, "before": null}}, "user_reports": [], "saved": false, "id": "d9bc31n", "gilded": 0, "archived": false, "report_reasons": null, "author": "roffLOL", "parent_id": "t1_d9bat77", "score": 0, "approved_by": null, "controversiality": 0, "body": "&gt; I consider it an upcoming trend in computing that we rather use binary protocols because they're easier to implement than LR(1) constrained plaintext parsers.\n\nso don't implement LR-parsers. it's messy. binary is an even worse mess, you can never just look at it and figure out how to parse it. fuck binary.\n\nhttps://en.wikipedia.org/wiki/Parsing_expression_grammar", "edited": false, "author_flair_css_class": null, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;I consider it an upcoming trend in computing that we rather use binary protocols because they&amp;#39;re easier to implement than LR(1) constrained plaintext parsers.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;so don&amp;#39;t implement LR-parsers. it&amp;#39;s messy. binary is an even worse mess, you can never just look at it and figure out how to parse it. fuck binary.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://en.wikipedia.org/wiki/Parsing_expression_grammar\"&gt;https://en.wikipedia.org/wiki/Parsing_expression_grammar&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "stickied": false, "subreddit": "programming", "score_hidden": false, "name": "t1_d9bc31n", "created": 1477687874.0, "author_flair_text": null, "created_utc": 1477659074.0, "ups": 0, "mod_reports": [], "num_reports": null, "distinguished": null}}], "after": null, "before": null}}, "user_reports": [], "saved": false, "id": "d9bat77", "gilded": 0, "archived": false, "report_reasons": null, "author": "htuhola", "parent_id": "t3_59tolr", "score": 0, "approved_by": null, "controversiality": 0, "body": "That no-syntax &amp; advocation of reluctant attitude towards syntax... AWGRH...\n\nFor the author, read these fucking posts through: http://boxbase.org/entries/2016/oct/24/marpa-right-recursion/\n\nI know they can be badly written and organized for your needs. I'll write better ones once I'll get to it.", "edited": false, "author_flair_css_class": null, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That no-syntax &amp;amp; advocation of reluctant attitude towards syntax... AWGRH...&lt;/p&gt;\n\n&lt;p&gt;For the author, read these fucking posts through: &lt;a href=\"http://boxbase.org/entries/2016/oct/24/marpa-right-recursion/\"&gt;http://boxbase.org/entries/2016/oct/24/marpa-right-recursion/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I know they can be badly written and organized for your needs. I&amp;#39;ll write better ones once I&amp;#39;ll get to it.&lt;/p&gt;\n&lt;/div&gt;", "stickied": false, "subreddit": "programming", "score_hidden": false, "name": "t1_d9bat77", "created": 1477685231.0, "author_flair_text": null, "created_utc": 1477656431.0, "ups": 0, "mod_reports": [], "num_reports": null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "banned_by": null, "removal_reason": null, "link_id": "t3_59tolr", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "banned_by": null, "removal_reason": null, "link_id": "t3_59tolr", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "banned_by": null, "removal_reason": null, "link_id": "t3_59tolr", "likes": null, "replies": {"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "banned_by": null, "removal_reason": null, "link_id": "t3_59tolr", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "d9bnkz5", "gilded": 0, "archived": false, "report_reasons": null, "author": "ilyash", "parent_id": "t1_d9bn0xk", "score": 1, "approved_by": null, "controversiality": 0, "body": "Two independent points:\n\n* You don't have to use this in your code (sorry I'm captain here but I must mention this)\n\n* I have been warned (by a C++ guy) that too much operators overloading leads to hell so the number of such \"magical\" operators is really small. On the other hand I think that defining methods with same name which do similar things for different types should be fine.\n", "edited": false, "author_flair_css_class": null, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Two independent points:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;You don&amp;#39;t have to use this in your code (sorry I&amp;#39;m captain here but I must mention this)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;I have been warned (by a C++ guy) that too much operators overloading leads to hell so the number of such &amp;quot;magical&amp;quot; operators is really small. On the other hand I think that defining methods with same name which do similar things for different types should be fine.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;", "stickied": false, "subreddit": "programming", "score_hidden": false, "name": "t1_d9bnkz5", "created": 1477703350.0, "author_flair_text": null, "created_utc": 1477674550.0, "ups": 1, "mod_reports": [], "num_reports": null, "distinguished": null}}], "after": null, "before": null}}, "user_reports": [], "saved": false, "id": "d9bn0xk", "gilded": 0, "archived": false, "report_reasons": null, "author": "knome", "parent_id": "t1_d9bm1kc", "score": 1, "approved_by": null, "controversiality": 0, "body": "Yeah, I know. No accounting for taste. I can appreciate the work behind what you've done, but I have an aversion to putting too much into operators.", "edited": false, "author_flair_css_class": null, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yeah, I know. No accounting for taste. I can appreciate the work behind what you&amp;#39;ve done, but I have an aversion to putting too much into operators.&lt;/p&gt;\n&lt;/div&gt;", "stickied": false, "subreddit": "programming", "score_hidden": false, "name": "t1_d9bn0xk", "created": 1477702675.0, "author_flair_text": null, "created_utc": 1477673875.0, "ups": 1, "mod_reports": [], "num_reports": null, "distinguished": null}}], "after": null, "before": null}}, "user_reports": [], "saved": false, "id": "d9bm1kc", "gilded": 0, "archived": false, "report_reasons": null, "author": "ilyash", "parent_id": "t1_d9bjnnl", "score": 1, "approved_by": null, "controversiality": 0, "body": "Matter of taste :)\nI prefer filter and map most of the time.\nThe thing is that both ? and / are operators and not special language constructs. That means you can customize them. Here are the default definitions from standard library:\n\nF ?(x, predicate:Fun) x.filter(predicate)\n\nF /(x, mapper:Fun) x.map(mapper)\n", "edited": false, "author_flair_css_class": null, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Matter of taste :)\nI prefer filter and map most of the time.\nThe thing is that both ? and / are operators and not special language constructs. That means you can customize them. Here are the default definitions from standard library:&lt;/p&gt;\n\n&lt;p&gt;F ?(x, predicate:Fun) x.filter(predicate)&lt;/p&gt;\n\n&lt;p&gt;F /(x, mapper:Fun) x.map(mapper)&lt;/p&gt;\n&lt;/div&gt;", "stickied": false, "subreddit": "programming", "score_hidden": false, "name": "t1_d9bm1kc", "created": 1477701494.0, "author_flair_text": null, "created_utc": 1477672694.0, "ups": 1, "mod_reports": [], "num_reports": null, "distinguished": null}}], "after": null, "before": null}}, "user_reports": [], "saved": false, "id": "d9bjnnl", "gilded": 0, "archived": false, "report_reasons": null, "author": "knome", "parent_id": "t3_59tolr", "score": 0, "approved_by": null, "controversiality": 0, "body": "&gt; 10?(X&gt;5)/(X*2)\n\nThis is grotesque.\n", "edited": false, "author_flair_css_class": null, "downs": 0, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;10?(X&amp;gt;5)/(X*2)&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This is grotesque.&lt;/p&gt;\n&lt;/div&gt;", "stickied": false, "subreddit": "programming", "score_hidden": false, "name": "t1_d9bjnnl", "created": 1477698570.0, "author_flair_text": null, "created_utc": 1477669770.0, "ups": 0, "mod_reports": [], "num_reports": null, "distinguished": null}}], "after": null, "before": null}}]